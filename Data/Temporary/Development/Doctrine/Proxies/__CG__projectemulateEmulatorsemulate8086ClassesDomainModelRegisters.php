<?php

namespace TYPO3\Flow\Persistence\Doctrine\Proxies\__CG__\project\emulate\Emulators\emulate8086\Classes\Domain\Model;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Registers extends \project\emulate\Emulators\emulate8086\Classes\Domain\Model\Registers implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __wakeup()
    {
        $this->__load();
        return parent::__wakeup();
    }

    public function Flow_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies()
    {
        $this->__load();
        return parent::Flow_Aop_Proxy_fixMethodsAndAdvicesArrayForDoctrineProxies();
    }

    public function Flow_Aop_Proxy_fixInjectedPropertiesForDoctrineProxies()
    {
        $this->__load();
        return parent::Flow_Aop_Proxy_fixInjectedPropertiesForDoctrineProxies();
    }

    public function Flow_Aop_Proxy_invokeJoinPoint(\TYPO3\Flow\Aop\JoinPointInterface $joinPoint)
    {
        $this->__load();
        return parent::Flow_Aop_Proxy_invokeJoinPoint($joinPoint);
    }

    public function getAx()
    {
        $this->__load();
        return parent::getAx();
    }

    public function setAx($ax)
    {
        $this->__load();
        return parent::setAx($ax);
    }

    public function getBx()
    {
        $this->__load();
        return parent::getBx();
    }

    public function setBx($bx)
    {
        $this->__load();
        return parent::setBx($bx);
    }

    public function getCx()
    {
        $this->__load();
        return parent::getCx();
    }

    public function setCx($cx)
    {
        $this->__load();
        return parent::setCx($cx);
    }

    public function getDx()
    {
        $this->__load();
        return parent::getDx();
    }

    public function setDx($dx)
    {
        $this->__load();
        return parent::setDx($dx);
    }

    public function getSp()
    {
        $this->__load();
        return parent::getSp();
    }

    public function setSp($sp)
    {
        $this->__load();
        return parent::setSp($sp);
    }

    public function getBp()
    {
        $this->__load();
        return parent::getBp();
    }

    public function setBp($bp)
    {
        $this->__load();
        return parent::setBp($bp);
    }

    public function getSi()
    {
        $this->__load();
        return parent::getSi();
    }

    public function setSi($si)
    {
        $this->__load();
        return parent::setSi($si);
    }

    public function getDi()
    {
        $this->__load();
        return parent::getDi();
    }

    public function setDi($di)
    {
        $this->__load();
        return parent::setDi($di);
    }


    public function __sleep()
    {
        return array_merge(array('__isInitialized__'), parent::__sleep());
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        parent::__clone();
    }
}